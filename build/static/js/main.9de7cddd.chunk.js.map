{"version":3,"sources":["Components/loadingModal.js","Components/login.js","Components/chartConfigs.js","Components/interfaceCard.js","Components/navbar.js","Components/errorComponent.js","Components/jsxCard.js","Components/pageLoader.js","Components/bandwidthFunctions.js","Components/interfaceModal.js","Components/pollingInterval.js","Components/liveInterface.js","Components/ietfInterfaceCard.js","Components/ietf_live_interfaces.js","App.js","reportWebVitals.js","index.js"],"names":["LoginModal","props","msg","Modal","size","backdrop","Body","style","color","textAlign","Footer","className","Button","variant","onClick","onHide","alignItems","marginLeft","DeviceAuth","useRecoilState","encytpKey","encrypt","useState","ip","setIp","username","setUserNaMe","password","setPassword","port","setPort","isAuth","setAuth","React","modalShow","setModalShow","setMsg","requestSession","axios","create","defaults","timeout","refetch","useQuery","a","post","then","response","data","status","encryptPassword","AES","localStorage","setItem","toString","catch","enabled","cacheTime","Infinity","useEffect","clear","push","to","pathname","from","Container","fluid","Row","marginTop","Col","xl","Card","Title","Form","onSubmit","evt","preventDefault","Control","value","onChange","e","target","placeholder","name","required","type","show","InitialChartBuild","ctx","responseTwo","Chart","register","LineController","LineElement","PointElement","LinearScale","CategoryScale","Legend","time","Date","options","responsive","animation","plugins","legend","display","labels","position","scales","y","min","suggestedMin","suggestedMax","padding","grid","ticks","stepSize","y1","x","borderColor","title","text","getSeconds","datasets","label","pointStyle","pointRadius","pointBorderColor","pointBackgroundColor","backgroundColor","parseInt","fill","radius","borderWidth","yAxisID","UpdateChart","chart","forEach","dataset","index","length","shift","InterfaceCard","interfacesChart","useRef","interfacesRef","createRef","current","updatedChart","update","getContext","id","ref","height","Math","round","speed","ipv4","mtu","outbandwidthDiff","inbandwidthDiff","description","split","require","DataTable","Navigation","Navbar","bg","expand","Toggle","Offcanvas","placement","Header","closeButton","Nav","fontWeight","getItem","IsErrorFallback","error","reportError","String","message","classname","fontSize","href","CreateCard","component","FallbackComponent","PageLoader","serial","model","uptime","software","BandwidthDiff","cachedQuery","lastQuery","getQueryCache","queries","state","interfaces","Object","values","map","cacheValue","newValue","diffIn","parseFloat","diffOut","sign","toFixed","ShowInterface","console","log","centered","interface","SetInterval","intervalMs","setIntervalMs","v","Group","as","controlId","Label","LiveInterfaces","decrypt","client","cache","undefined","selectInterface","setSelectInterface","passwordDecrypt","enc","Utf8","calulatedBandwdithDiff","int","Int8Array","refetchInterval","isLoading","isFetching","fetchingStatus","cpu","mem","marginBottom","qos","IetfInterfaceCard","isPolling","key","IetfLiveInterfaces","stats","queryClient","QueryClient","atom","default","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9de7cddd.chunk.js","sourcesContent":["import Modal from 'react-bootstrap/Modal'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Col from 'react-bootstrap/Row'\r\n\r\nexport function LoginModal(props) {\r\n\r\n  if(props.msg === 'Request Timeout'){\r\n\r\n    return (\r\n      <Modal {...props} size=\"sm\" aria-labelledby=\"contained-modal-title-vcenter\" backdrop={true}>\r\n        <Modal.Body>\r\n          <p style={{color: 'black', textAlign: 'center'}}>{props.msg}</p>\r\n          <p style={{color: 'black', textAlign: 'center'}}>The App Did Not Receive A Response From The Device</p>\r\n        </Modal.Body> \r\n        <Modal.Footer>\r\n        <Col className=\"d-flex justify-content-center\"><Button size=\"sm\" variant=\"danger\" onClick={props.onHide} style={{alignItems: 'center'}}>ReAuth</Button></Col>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  }\r\n  else{\r\n    return (\r\n      <Modal {...props} size=\"sm\" aria-labelledby=\"contained-modal-title-vcenter\" backdrop={true}>\r\n        <Modal.Body>\r\n          <p style={{color: 'black', textAlign: 'center'}}>{props.msg}</p>\r\n          {props.msg !== 'Authentication Failed' ? <div style={{marginLeft: '100px'}}><div className=\"spinner\"/></div>: <p style={{color: 'black', textAlign: 'center'}}>Verify RESTCONF Capabilities and Credentials</p>}\r\n        </Modal.Body> \r\n        <Modal.Footer>\r\n        {props.msg === 'Authentication Failed' ? <Col className=\"d-flex justify-content-center\"><Button size=\"sm\" variant=\"danger\" onClick={props.onHide} style={{alignItems: 'center'}}>ReAuth</Button></Col> : <div></div>}\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { useQuery } from 'react-query'\r\nimport axios from 'axios';\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Form from 'react-bootstrap/Form'\r\nimport {useRecoilState} from 'recoil';\r\nimport { LoginModal } from './loadingModal'\r\nimport { AES }from 'crypto-js';\r\nimport {encytpKey}  from '../App'\r\n\r\nexport function DeviceAuth(){\r\n    const [encrypt] = useRecoilState(encytpKey);\r\n    const [ip, setIp] = useState('')\r\n    const [username, setUserNaMe] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [port, setPort] = useState(443)\r\n    const [isAuth, setAuth] = useState(false)\r\n    const [modalShow, setModalShow] = React.useState(false);\r\n    const [msg, setMsg] = useState('Autheniticating')\r\n    const requestSession = axios.create();\r\n    requestSession.defaults.timeout = 30000;\r\n    const {refetch } = useQuery(ip + 'login', async () => {\r\n    \r\n        const response = await requestSession.post('/login', {'ip': ip, 'username': username, 'password': password, 'port': port}).then(response =>{\r\n\r\n            if(response.data.status === 200){\r\n                const encryptPassword = AES.encrypt(password, encrypt);\r\n                localStorage.setItem('ip', ip);\r\n                localStorage.setItem('port', 443);\r\n                localStorage.setItem('username', username);\r\n                localStorage.setItem('password', encryptPassword.toString());\r\n                localStorage.setItem('pollingInterval', 20000)\r\n                setModalShow(false)\r\n                setAuth(true)\r\n                return response.data\r\n    \r\n            }\r\n            else{\r\n                setMsg('Authentication Failed')\r\n            }\r\n        }).catch(() => {setMsg('Request Timeout')})\r\n        \r\n        return response\r\n\r\n        },\r\n        {\r\n            enabled: false, cacheTime: Infinity\r\n        })\r\n\r\n\r\n    const handleSubmit =  (evt) => {\r\n        evt.preventDefault();\r\n        refetch();\r\n\r\n    }\r\n\r\n    const resetPageStatus = () => {\r\n        setMsg('Autheniticating')\r\n        setModalShow(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n        localStorage.clear()\r\n    }, [])\r\n    \r\n\r\n    if(!isAuth){\r\n        return (\r\n            <Container fluid=\"xl\">\r\n                <Row style={{alignItems: 'center', marginTop: \"100px\"}}>\r\n                    <Col xl={4}/>\r\n                    <Col xl={4}>\r\n                        <Card>\r\n                            <Card.Body>\r\n                                <Card.Title className=\"mb-3\" style={{color: 'black', textAlign: 'center'}}>IOS-XE Login</Card.Title>\r\n                                    <Form onSubmit={handleSubmit}>\r\n                                        <Form.Control size=\"sm\" className=\"mb-3 text-center\" value={ip} onChange={e => setIp(e.target.value)} placeholder=\"IP Address\" name=\"ipAddress\" required/>\r\n                                        <Form.Control size=\"sm\" className=\"mb-3 text-center\" value={username} onChange={e => setUserNaMe(e.target.value)} placeholder=\"Username\" name=\"username\" required/>\r\n                                        <Form.Control size=\"sm\" className=\"mb-3 text-center\" value={password} onChange={e => setPassword(e.target.value)} placeholder=\"Password\" name=\"password\" required/>\r\n                                        <Form.Control size=\"sm\" className=\"mb-3 text-center\" value={port} onChange={e => setPort(e.target.value)} placeholder=\"Default 443\" name=\"restconfPort\" required/>\r\n                                        <Form.Control  onClick={() => setModalShow(true)} type=\"submit\" value=\"Login\" className=\"btn btn-success\"/>\r\n                                    </Form>\r\n                                    {modalShow ? <LoginModal msg={msg} show={modalShow} onHide={() => resetPageStatus()}/> : <></>}\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col xl={4}/>\r\n                    </Row>\r\n                </Container>\r\n            );\r\n        }\r\n        else if(isAuth){\r\n            return(\r\n            <Redirect push to={{pathname: '/live_interfaces'}} from='/login'/>\r\n            )\r\n        }\r\n    }","import {Chart, LineController, CategoryScale, LineElement, PointElement, LinearScale, Title, Legend, BarController, BarElement } from \"chart.js\";\nimport Card from \"react-bootstrap/Card\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nconst $ = require('jquery');\n$.DataTable = require('datatables.net');\n\n\n\nexport function CpuChartConfig() {\n\n    const config = {\n        responsive: true,\n        animation: true,\n        plugins: {\n        legend: {\n        display: true,\n        labels: {color:'white'},\n        position: 'top'\n              },\n            },\n        scales: {\n            y: {\n            min: 0,\n            display: true,\n            position: 'right',\n            grid: {\n                    },\n                ticks: {\n                    stepSize: 1,\n                    color: \"yellow\"\n                }\n            },\n             x: {\n             grid: {\n                    borderColor: 'white',\n             },\n                ticks: {\n                    stepSize: 1,\n                    color: \"white\",\n                 },\n                title: {\n                    display: true,\n                    text: 'Seconds',\n                    color: \"white\"\n    \n                }\n            }\n        }\n    };\n\n    return config\n}\n\nexport function ChartConfig() {\n\n    const config = {\n        responsive: true,\n        animation: true,\n        plugins: {\n        legend: {\n        display: true,\n        labels: {color:'white'},\n        position: 'top'\n              },\n            },\n        scales: {\n            y: {\n            min: 0,\n            suggestedMin: 5,\n            suggestedMax: 20,\n            display: true,\n            position: 'right',\n            padding: 3,\n            grid: {\n                    },\n                ticks: {\n                    stepSize: 5,\n                    color: \"yellow\"\n                }\n            },\n            y1: {\n                suggestedMin: 5,\n                suggestedMax: 20,\n                min: 0,\n                display: true,\n                position: 'left',\n                padding: 3,\n                grid: {\n                        },\n                    ticks: {\n                        stepSize: 5,\n                        color: \"white\"\n                    }\n                },\n             x: {\n             grid: {\n                    borderColor: 'white',\n             },\n                ticks: {\n                    stepSize: 1,\n                    color: \"white\",\n                 },\n                title: {\n                    display: true,\n                    text: 'Seconds',\n                    color: \"white\"\n    \n                }\n            }\n        }\n    };\n\n    return config\n}\n\nexport function BarChart(ctx, inbound){\n    Chart.register(LineController, LineElement, PointElement, LinearScale, CategoryScale, Title, Legend, BarController, BarElement);\n    var chart = new Chart(ctx, {\n    type: 'bar',\n    options: {\n        scales: {\n          y: {\n            suggestedMin: 5,\n            suggestedMax: 20,\n            beginAtZero: true,\n            grid: {\n            },\n        ticks: {\n            color: \"white\"\n            },\n          },\n          x: {\n            suggestedMin: 5,\n            suggestedMax: 20,\n            grid: {\n                   borderColor: 'white',\n            },\n               ticks: {\n                   stepSize: 1,\n                   color: \"white\",\n                },\n               title: {\n                   display: false,\n                   text: 'Mbps',\n                   color: \"white\"\n   \n               }\n           }\n        }\n      },\n    data: {\n        labels: ['Bytes'],\n        datasets: [{\n            label: ['Bytes'],\n            data: [inbound],\n            backgroundColor: [\n                'rgba(144, 198, 149, 1)',\n\n            ],\n            borderColor: [\n                'rgba(30, 130, 76, 1)',\n            ],\n            borderWidth: 1,\n            barThickness: 80\n        }]\n    },\n    })\n\nreturn chart\n\n}\n\n\nexport function BarChartUpdate(chart, data){\n\n    chart.data.labels.pop();\n    chart.data.labels.push('Rate');\n    chart.data.datasets.forEach((dataset) => {\n        dataset.data.pop();\n        dataset.data.push(data);\n    })\n    \n    return chart\n}\n\n\nexport function InitialChartBuild(ctx, response, responseTwo){\n\n    Chart.register(LineController, LineElement, PointElement, LinearScale, CategoryScale, Title, Legend);\n    let time = new Date()\n\n    let chart = new Chart(ctx, {\n    type: 'line',\n    options: ChartConfig(),\n    data: {\n    labels: [time.getSeconds()],\n    datasets: [{\n        label: 'Mbps Out',\n        pointStyle: 'star',\n        pointRadius: 4,\n        pointBorderColor: \"yellow\",\n        pointBackgroundColor: \"yellow\",\n        borderColor: 'yellow',\n        backgroundColor: 'yellow',\n        data: [parseInt(response) / 1000],\n        fill: false,\n        radius: 0,\n        borderWidth: 1,\n        yAxisID: 'y'},\n        \n        {\n        pointStyle: 'star',\n        pointBackgroundColor: \"yellow\",\n        pointBorderColor: \"yellow\",\n        pointRadius: 4,\n        label: 'Mbps In',\n        borderColor: 'white',\n        backgroundColor: 'white',\n        data: [parseInt(responseTwo) / 1000],\n        fill: false,\n        radius: 0,\n        borderWidth: 1,\n        yAxisID: 'y1'}],\n        }\n        });    \n    return chart\n}\n\nexport function InitialCpuChartBuild(ctx, response){\n\n    Chart.register(LineController, LineElement, PointElement, LinearScale, CategoryScale, Title, Legend);\n    let time = new Date()\n\n    let chart = new Chart(ctx, {\n    type: 'line',\n    options: CpuChartConfig(),\n    data: {\n    labels: [time.getSeconds()],\n    datasets: [{\n        label: '5Sec',\n        borderColor: 'yellow',\n        backgroundColor: 'yellow',\n        data: [response],\n        fill: true,\n        tension: .5,}],\n        }\n        });    \n\n    return chart\n}\n\n\nexport function UpdateChart(chart, response, responseTwo) {\n\n    let time = new Date()\n    chart.data.datasets.forEach((dataset, index) => {\n    if (dataset.data.length >= 10){\n        if(index === 0){\n            chart.data.labels.shift();\n            chart.data.labels.push(time.getSeconds());\n            dataset.data.shift();\n            dataset.data.push(parseInt(response));\n        }\n        else{\n            dataset.data.shift();\n            dataset.data.push(parseInt(responseTwo));\n        }\n    }\n    else{\n        if(index === 0){\n            chart.data.labels.push(time.getSeconds());\n            dataset.data.push(parseInt(response));\n        }\n        else{\n            dataset.data.push(parseInt(responseTwo));\n\n            }\n        }\n    });\n    return chart\n    \n}\n\nexport function UpdateCpuChart(chart, response) {\n\n    let time = new Date()\n    chart.data.datasets.forEach((dataset) => {\n    if (dataset.data.length >= 10){\n        chart.data.labels.shift();\n        chart.data.labels.push(time.getSeconds());\n        dataset.data.shift();\n        dataset.data.push(response);\n    }\n    else{\n        chart.data.labels.push(time.getSeconds());\n        dataset.data.push(response);\n        }\n    });\n\n    return chart\n    \n}\n\nexport function ArpTableHtml(tableRef) {\n\n                            return <div classname=\"table-responsive overflow-auto\">\n\t\t\t\t<table ref={tableRef} className=\"table  table-dark row-text\" width=\"100%\">\n                                <thead classname=\"thead-light\">\n                                    <tr>\n                                        <th >Address</th>\n                                        <th >Encap Type</th>\n                                        <th >Mac</th>\n                                        <th >Mode</th>\n                                        <th >Time</th>\n                                        <th >Link Type</th>\n                                        <th >Vrf</th>\n                                        <th >Interface</th> \n                                    </tr>\n                                </thead>                               \n                            </table>\n\t\t\t</div>\n                        \n\n    }\n\n\nexport function EnvTableHtml(tableRef) {\n\n    return  <div classname=\"table-responsive overflow-auto\">\n                <table ref={tableRef} className=\"table table-dark row-text\" width=\"100%\">\n                    <thead classname=\"thead-light\">\n                        <tr>\n                            <th >Name</th>\n                            <th >Location</th>\n                            <th >State</th>\n                            <th >Current</th>\n                            <th >Meas.</th>\n                        </tr>\n                    </thead>                               \n                </table>\n            </div>\n            \n    }\n\n\nexport function CpuTableHtml(tableRef) {\n\n    return <div classname=\"table-responsive overflow-auto\">\n                        <table ref={tableRef} className=\"table table-dark row-text\" width=\"100%\">\n                            <thead classname=\"thead-light\">\n                                <tr>\n                                    <th >Name</th>\n                                    <th >Run Time</th>\n                                    <th >Avg-run-time</th>\n                                    <th >Five-seconds</th>\n                                    <th >One-minute</th>\n                                    <th >Five-minutes</th>        \n                                </tr>\n                            </thead>                               \n                        </table>\n                    </div>\n    }\n\n    export function PrefixListHtml(tableRef) {\n\n        return <div classname=\"table-responsive overflow-auto\">\n                            <table ref={tableRef} className=\"table table-dark row-text\" width=\"100%\">\n                                <thead classname=\"thead-light\">\n                                    <tr>\n                                        <th >SEQ</th>\n                                        <th >Action</th>\n                                        <th >IP</th>\n                                        <th >GE</th>\n                                        <th >LE</th>\n                                    </tr>\n                                </thead>                               \n                            </table>\n                        </div>\n        }\n\nexport function MacTableHtml(tableRef) {\n\n        return <div classname=\"table-responsive overflow-auto\">\n                            <table ref={tableRef} className=\"table table-dark row-text\" width=\"100%\">                                \n\t\t\t\t    <thead classname=\"thead-light\">\n                                    <tr>\n                                        <th >Vlan</th>\n                                        <th >MAC</th>\n                                        <th >Type</th>\n                                        <th >Port</th>       \n                                    </tr>\n                                </thead>                               \n                            </table>\n                        </div>\n        }\n    \n\nexport function MemTableHtml(tableRef) {\n\n    return  <div classname=\"table-responsive overflow-auto\">\n                        <table ref={tableRef} className=\"table table-dark row-text\" width=\"100%\">\n                            <thead classname=\"thead-light\">\n                                <tr>\n                                    <th >Total</th>\n                                    <th >Used</th>\n                                    <th >Used%</th>\n                                    <th >Free</th>\n                                    <th >Free%</th>\n                                    <th >Used Avl.</th>\n                                    <th >Used Avl%</th>\n                                </tr>\n                            </thead>                               \n                        </table>\n                    </div>\n    }\n\nexport function OpsfTableHtml(tableRef) {\n\n        return  <div classname=\"table-responsive overflow-auto\">\n                    <table ref={tableRef} className=\"table table-dark row-text\"  width=\"100%\">\n                        <thead classname=\"thead-light\">\n                            <tr>\n                                <th >Neighbor ID</th>\n                                <th >Address</th>\n                                <th >State</th>\n                                <th >DR</th>\n                                <th >bdr</th>\n                            </tr>\n                        </thead>                               \n                    </table>\n                </div>\n        }\n\nexport function HsrpTableHtml(tableRef) {\n\n            return  <div classname=\"table-responsive overflow-auto\">\n                        <table ref={tableRef} className=\"table table-dark row-text\"  width=\"100%\">\n                            <thead classname=\"thead-light\">\n                                <tr>\n                                    <th >Vlan</th>\n                                    <th >Group</th>\n                                    <th >Priority</th>\n                                    <th >State</th>\n                                    <th >Standby</th>\n                                    <th >VIP</th>\n                                </tr>\n                            </thead>                               \n                        </table>\n                    </div>\n            }\n\nexport function DmvpnTableHtml(tableRef) {\n\n\n    return  <div classname=\"table-responsive  overflow-auto\">\n                <table ref={tableRef} className=\"table table-dark row-text\"  width=\"100%\">\n                    <thead classname=\"thead-light\">\n                        <tr>\n                            <th >Peer NBMA</th>\n                            <th >Peer Tunnel</th>                    \n                            <th >State</th>\n                            <th >Up Time</th>\n                            <th >Attribute</th>\n                        </tr>\n                    </thead>                               \n                </table>\n            </div>\n    }\n\n\nexport function OpsfIntsFormTableHtml(tableRef) {\n\n            \n        return   <table ref={tableRef} className=\"table table-dark row-text table-responsive overflow-auto\"  width=\"100%\">\n                        <thead classname=\"thead-light\">\n                            <tr>\n                                <th >Name</th>\n                                <th >Net Type</th>\n                                <th >Area</th>\n                                <th >Priority</th>\n                                <th >Neighbor ID</th>\n                                <th >Address</th>\n                                <th >State</th>\n                            </tr>\n                        </thead>                               \n                    </table>\n        }\n\nexport function OpsfIntsTableHtml(tableRef) {\n\n            \n            return   <table ref={tableRef} className=\"table table-dark row-text table-responsive overflow-auto\"  width=\"100%\">\n                            <thead classname=\"thead-light\">\n                                <tr>\n                                    <th >Name</th>\n                                    <th >Net Type</th>\n                                    <th >Area</th>\n                                    <th >BDR</th>\n                                    <th >DR</th>\n                                    <th >Cost</th>\n                                    <th >Dead Int.</th>\n                                    <th >Hello In.</th>\n                                    <th >Hello Timer</th>\n                                    <th >Priority</th>\n                                    <th >Neighbor ID</th>\n                                    <th >Address</th>\n                                    <th >State</th>\n                                    <th >DR</th>\n                                    <th >bdr</th>\n                                </tr>\n                            </thead>                               \n                        </table>\n            }\n\nexport function BgpTableHtml(tableRef) {\n\n    return  <div classname=\"table-responsive overflow-auto\">\n                <table ref={tableRef} className=\"table table-dark row-text\" width=\"100%\">\n                    <thead classname=\"thead-light\">\n                        <tr>\n                            <th >ID</th>\n                            <th >Remote AS</th>\n                            <th >Uptime</th>\n                            <th >State</th>\n                            <th >Prefixes Rec.</th>\n                            <th >Prefixes Sent</th>\n                            <th >Installed Prefixes</th>\n                            <th >Local Port</th>\n                            <th >Remote Port</th>\n                        </tr>\n                    </thead>                               \n                </table>\n            </div>\n    }\n\nexport function SpanTreeHtml(tableRef) {\n\n        return  <div classname=\"table-responsive overflow-auto\">\n                    <table ref={tableRef} className=\"table table-dark row-text\" style={{height: 175, width: '100%'}}>\n                        <thead classname=\"thead-light\">\n                            <tr>\n                                <th >Name</th>\n                                <th >Cost</th>\n                                <th >Port Priority</th>\n                                <th >Role</th>\n                                <th >State</th>\n                                <th >Fwd. Transistion</th>\n                                <th >Link Type</th>\n                            </tr>\n                        </thead>                               \n                    </table>\n                </div>\n        }\n\nexport function GlobalSpanTreeHtml(data) {\n\n    if(data !== undefined){\n            return  <Card bg={\"dark\"}>\n                    <Card.Body>\n                        <Row>\n                         <Card.Title className=\"mb-3\">Mode: {data.mode}</Card.Title>\n                        </Row>\n                        <Row>\n                            <Col xl={3}>\n                                {data['bridge-assurance'] ? <p className=\"card-text\">Bridge Assurance:</p> : <div/>}\n                                {data['loop-guard'] ? <p className=\"card-text\">Loop Guard:</p> : <div/>}\n                                {data['bpdu-guard'] ? <p className=\"card-text\">BPDU Guard:</p> : <div/>}\n                                {data['etherchannel-misconfig-guard'] ? <p className=\"card-text\">EtherChannel Mis.</p> : <div/>}\n                            </Col>\n                            <Col xl={2}>\n                                <p className=\"card-text\">{data['bridge-assurance'][0] === null ? 'Disabled' : data['bridge-assurance']}</p>\n                                <p className=\"card-text\">{data['loop-guard'][0] === null ? 'Disabled' : data['loop-guard']}</p>\n                                <p className=\"card-text\">{data['bpdu-guard'] && data['bpdu-guard'][0] === null ? 'Disabled' : data['bpdu-guard']}</p>\n                                <p className=\"card-text\">{data['etherchannel-misconfig-guard'][0] === null ? 'Disabled' : data['etherchannel-misconfig-guard']}</p>\n                            </Col>\n                            <Col xl={8}/>\n                        </Row>\n                        </Card.Body>\n                    </Card>\n            }\n            else{\n                return <h4 style={{textAlign: 'center'}}>Spanning Tree Not Enabled</h4>\n            }\n            }\n\n            \nexport function CdpTableHtml(tableRef) {\n\n    return  <div classname=\"table-responsive  overflow-auto\">\n                <table ref={tableRef} className=\"table table-dark row-text\" width=\"100%\">                    \n\t\t\t<thead>\n                        <tr>\n                            <th >Device</th>\n                            <th >Platform</th>\n                            <th >Remote-Port</th>\n                            <th >Duplex</th>\n                            <th >Capability Avl.</th>\n                            <th >Mgmt IP</th>\n                            <th >IP</th>\n                            <th >Local Int.</th>\n                        </tr>\n                    </thead>                               \n                </table>\n            </div>\n    }\n\nexport function LldpTableHtml(tableRef) {\n\n    return  <div classname=\"table-responsive  overflow-auto\">\n                <table ref={tableRef} className=\"table table-dark row-text\" width=\"100%\">                    \n\t\t\t<thead>\n                        <tr>\n                            <th >Device</th>\n                            <th >Local Int.</th>\n                            <th >TTL</th>\n                            <th >Remote Int.</th>                             \n                        </tr>\n                    </thead>                               \n                </table>\n            </div>\n                \n    }\n\nexport function VlanTableHtml(tableRef) {\n\n    return  <div className=\"col-12\">\n                <div classname=\"table-responsive\">\n                        <table ref={tableRef} className=\"table table-dark row-text\" width=\"100%\">                            \n\t\t\t\t<thead>\n                                <tr style={{textAlign: 'center'}}>\n                                    <th >Name</th>\n                                    <th >ID Int.</th>\n                                    <th >Status</th>\n                                    <th >Interfaces</th>                             \n                                </tr>\n                            </thead>                               \n                        </table>\n                    </div>\n                </div>\n                \n    }\n\nexport function TrunkTableHtml(tableRef) {\n    return  <div classname=\"table-responsive overflow-auto\">\n                        <table ref={tableRef} className=\"table table-dark\" width=\"100%\">                            \n\t\t\t\t<thead>\n                                <tr style={{textAlign: 'center'}}>\n                                    <th >Interface</th>\n                                    <th >vlans</th>\n                                    <th >Status</th>\n                                    <th >MbpsOut</th>\n                                    <th >MbpsIn</th>                            \n                                </tr>\n                            </thead>                               \n                        </table>\n                    </div>\n                \n                \n    }\n \nexport function AccessTableHtml(tableRef) {\n    return  <div classname=\"table-responsive overflow-auto\">\n                <table ref={tableRef} className=\"table table-dark row-text\" width=\"100%\">\n                    <thead>\n                        <tr style={{textAlign: 'center'}}>\n                            <th >Interface</th>\n                            <th >vlan</th>\n                            <th >Status</th>\n                            <th >MbpsOut</th>\n                            <th >MbpsIn</th>                           \n                        </tr>\n                    </thead>                               \n                </table>\n            </div>\n                \n    }\n \nexport function InterfacesTableHtml(tableRef) {\n        return  <div classname=\"table-responsive overflow-auto\" style={{textAlign: 'left'}}>\n                    <table ref={tableRef} className=\"table table-dark\" width='100%'>\n                        <thead>\n                            <tr>\n                                <th >Interface</th>\n                                <th >Status</th>\n                                <th >Description</th>\n                                <th >IP</th>\n                                <th >Mask</th>\n                                <th >Speed (Mbps)</th>\n                                <th >Qos Allocation</th>\n                                <th >Transmit Band</th> \n                                <th >RecieveBand</th>\n                                <th >Transmit Diff</th>\n                                <th >Recieve Diff</th>\n                            </tr>\n                        </thead>                               \n                    </table>\n                </div>\n                    \n        }\n\nexport function DmvpnHubTableHtml(tableRef) {\n            return  <div classname=\"table-responsive overflow-auto\">\n                        <table ref={tableRef} className=\"table table-dark\" width='100%' >\n                            <thead>\n                                <tr>\n                                    <th >Interface</th>\n                                    <th >Status</th>\n                                    <th >Priority</th>                                                          \n                                </tr>\n                            </thead>                               \n                        </table>\n                    </div>\n                        \n            }\n    \n\nexport function TunnelInterfacesTableHtml(tableRef) {\n            return  <div classname=\"table-responsive overflow-auto\">\n                        <table ref={tableRef} className=\"table table-dark\" width='100%'>\n                            <thead>\n                                <tr>\n                                    <th >Interface</th>\n                                    <th >Status</th>\n                                    <th >Description</th>\n                                    <th >IP</th>\n                                    <th >Mask</th>\n                                    <th >Speed</th>\n                                    <th >Trans Band</th> \n                                    <th >RecieveBand</th>                       \n                                </tr>\n                            </thead>                               \n                        </table>\n                    </div>\n                        \n            }\n\nexport function DmvpnHubsTableHtml(tableRef) {\n    return  <div classname=\"table-responsive overflow-auto\">\n                <table ref={tableRef} className=\"table table-dark\"  width=\"100%\">\n                    <thead>\n                        <tr>\n                            <th >NBMA</th>\n                            <th >IP</th>            \n                        </tr>\n                    </thead>                               \n                </table>\n            </div>\n                \n    }\n\nexport function DmvpnInterfacesTableHtml(tableRef) {\n    return  <div classname=\"table-responsive overflow-auto\">\n                <table ref={tableRef} className=\"table table-dark\"  width=\"100%\">\n                    <thead>\n                        <tr>\n                            <th >Interface</th>\n                            <th >Source</th>\n                            <th >MTU</th>\n                            <th >MSS</th>\n                            <th >Mode</th>\n                            <th >Authentication</th>\n                            <th >HoldTime</th> \n                            <th >Protection</th>\n                            <th >Network ID</th>                       \n                        </tr>\n                    </thead>                               \n                </table>\n            </div>\n                \n    }\n\n\n\nexport function NbmaLocationTableHtml(tableRef) {\n    return  <div classname=\"table-responsive overflow-auto \">\n                <table ref={tableRef} className=\"table table-dark\"  width=\"100%\">\n                    <thead>\n                        <tr>\n                            <th >IP</th>\n                            <th >Country Code</th>\n                            <th >City</th>\n                            <th >Contenent Code</th>\n                            <th >Latitude</th>\n                            <th >Longitude</th>\n                            <th >Organization</th>\n                            <th >ASN</th> \n                            <th >TimeZone</th>\n                        </tr>\n                    </thead>                               \n                </table>\n            </div>\n                \n    }\n\nexport function Ipv4RibTableHtml(tableRef) {\n\nreturn <div classname=\"table-responsive overflow-auto \">\n    <table ref={tableRef} className=\"table table-dark\"  width=\"100%\">\n        <thead >\n            <tr id='headr'>\n                <th >Name</th>\n                <th >Address-Family</th>\n                <th >Destination</th>\n                <th >Prefrence</th>\n                <th >Metric</th>\n                <th >Nex-Hop</th>\n                <th >Out Interface</th>\n                <th >Is Active</th>\n                <th >Source Protocol</th>\n            </tr>\n        </thead>\n    </table>\n</div>\n}\n\nexport function Ipv6RibTableHtml(tableRef) {\n\n    return <div classname=\"table-responsive overflow-auto \">\n                <table ref={tableRef} className=\"table table-dark\"  width=\"100%\">\n                    <thead>\n                        <tr>\n                            <th >Name</th>\n                            <th >Address-Family</th>\n                            <th >Destination</th>\n                            <th >Prefrence</th>\n                            <th >Metric</th>\n                            <th >Nex-Hop</th>\n                            <th >Out Interface</th>\n                            <th >Is Active</th>\n                            <th >Source Protocol</th>\n                        </tr>\n                    </thead>\n                </table>\n            </div>\n}\n\nexport function PlusRibEntriesTableHtml(tableRef) {\n\n    return <div classname=\"table-responsive overflow-auto \">\n                <table ref={tableRef} className=\"table table-dark\"  width=\"100%\">\n                    <thead>\n                        <tr>\n                            <th >Destination</th>\n                            <th >Nex-Hop</th>\n                            <th >Out Interface</th>\n                            <th >Source Protocol</th>\n                            <th >TimeStamp</th>\n                        </tr>\n                    </thead>\n                </table>\n            </div>\n}\n\n\nexport function ProtocolsTableHtml(tableRef) {\n\n    return  <div classname=\"table-responsive overflow-auto \">\n                <table ref={tableRef} className=\"table table-dark\"  width=\"100%\">\n                    <thead>\n                        <tr>\n                            <th >Protocol</th>\n                            <th >ID</th>\n                            <th >Name</th>\n                            <th >Type</th>\n                            <th >Interfaces</th>\n                        </tr>\n                    </thead>\n                </table>\n            </div>\n}\n\nexport function PoeTableHtml(tableRef) {\n\n    return  <div classname=\"table-responsive overflow-auto \">\n                <table ref={tableRef} className=\"table table-dark\"  width=\"100%\">\n                    <thead>\n                        <tr>\n                            <th >Interface</th>\n                            <th >Poe Enabled</th>\n                            <th >Consumed Power</th>\n                            <th >PD Class</th>\n                        </tr>\n                    </thead>\n                </table>\n            </div>\n}\n\nexport function SlaTableHtml(tableRef) {\n\n    return  <div classname=\"table-responsive overflow-auto \">\n                <table ref={tableRef} className=\"table table-dark\"  width=\"100%\">\n                    <thead>\n                        <tr>\n                            <th >SLA ID</th>\n                            <th >Start Time</th>\n                            <th >SLA Type</th>\n                            <th >Latest Result</th>\n                            <th >Success</th>\n                            <th >Failure</th>\n                            <th >RTT</th>\n                            <th >TTL</th>\n                        </tr>\n                    </thead>\n                </table>\n            </div>\n}\n\nexport function TransceiverTableHtml(tableRef) {\n\n    return  <div classname=\"table-responsive overflow-auto \">\n                <table ref={tableRef} className=\"table table-dark\"  width=\"100%\">\n                    <thead>\n                        <tr>\n                            <th >Interface</th>\n                            <th >IsFault</th>\n                            <th >Temp</th>\n                            <th >Connector Type</th>\n                            <th >Speed</th>\n                            <th >Power out</th>\n                            <th >Power In</th>\n                            <th >Laser Bias</th>\n                        </tr>\n                    </thead>\n                </table>\n            </div>\n}\n\n\n\nexport function InventoryTransceiverTableHtml(tableRef) {\n\n    return  <div classname=\"table-responsive overflow-auto \">\n                <table ref={tableRef} className=\"table table-dark\"  width=\"100%\">\n                    <thead>\n                        <tr>\n                            <th >Interfaces</th>\n                            <th >Serial</th>\n                            <th >Connector Type</th>\n                            <th >Vender</th>\n                        </tr>\n                    </thead>\n                </table>\n            </div>\n}\n\nexport function YangHtml(tableRef) {\n\n        return  <div classname=\"table-responsive overflow-auto \">\n                    <table ref={tableRef}  className=\"table table-dark\"  width=\"100%\">\n                        <thead>\n                            <tr>\n                                <th class=\"text-center\" scope=\"col\">XPaths</th>\n                            </tr>\n                        </thead>                               \n                    </table>\n                </div>\n                             \n    }\n\n\n\n\n\n\n        \n    \n","import React, { useEffect, useRef } from 'react';\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport { InitialChartBuild, UpdateChart } from './chartConfigs';\r\nconst $ = require('jquery');\r\n$.DataTable = require('datatables.net');\r\n\r\n\r\nexport  function InterfaceCard(props){\r\n  const interfacesChart = useRef(null)\r\n  const interfacesRef = React.createRef()\r\n\r\n\r\n  useEffect(() => {\r\n    if(interfacesChart.current !== null){\r\n      try{\r\n        let updatedChart = UpdateChart(interfacesChart.current, parseInt(props.value['statistics']['tx-kbps']),parseInt(props.value['statistics']['rx-kbps']));\r\n        updatedChart.update()\r\n        interfacesChart.current = updatedChart\r\n      }\r\n      catch{}\r\n    }\r\n    \r\n  }, [props.value, interfacesRef])\r\n  \r\n\r\n  useEffect(() => {\r\n    try{\r\n      let chart = InitialChartBuild(interfacesRef.current.getContext('2d'), parseInt(props.value['statistics']['tx-kbps']), parseInt(props.value['statistics']['rx-kbps']));\r\n      interfacesChart.current = chart\r\n    }\r\n    catch{}\r\n  }, [props.value, interfacesRef])\r\n\r\n\r\nreturn      <div id={props.value.name}>\r\n            <Row>\r\n              <canvas ref={interfacesRef} height=\"300px\"/>\r\n            </Row>\r\n            <br/>\r\n              <Row>\r\n                  <Col xl={3} style={{textAlign: \"left\"}}>\r\n                    <p className=\"card-text\">Speed:</p>\r\n                    <p className=\"card-text\">Status:</p>\r\n                    <p className=\"card-text\">IP:</p>\r\n                    <p className=\"card-text\">MTU:</p>\r\n                    <p className=\"card-text\">Mbps Out:</p>\r\n                    <p className=\"card-text\">Mbps In:</p>\r\n                    <p className=\"card-text\">Mbps Out Diff:</p>\r\n                    <p className=\"card-text\">Mbps In Diff:</p>\r\n                  </Col>\r\n                  <Col xl={3} style={{textAlign: \"left\"}}>\r\n                    <p className=\"card-text\">{Math.round(parseInt(props.value.speed) / 1000000000) * 1000 } (Mbps)</p>\r\n                    <p className=\"card-text\">{props.value['oper-status']}</p>\r\n                    {props.value.ipv4 ? <p className=\"card-text\">{props.value.ipv4}</p> : <p className=\"card-text\">n/a</p>}\r\n                    <p className=\"card-text\">{props.value.mtu}</p>\r\n                    <p className=\"card-text\">{props.value['statistics']['tx-kbps']}</p>\r\n                    <p className=\"card-text\">{props.value['statistics']['rx-kbps']}</p>\r\n                    <p className=\"card-text\">{props.value.outbandwidthDiff}</p>\r\n                    <p className=\"card-text\">{props.value.inbandwidthDiff}</p>\r\n                  </Col>\r\n                  <Col xl={3} style={{textAlign: \"left\"}}>\r\n                    <p className=\"card-text\">PPs Out:</p>\r\n                    <p className=\"card-text\">PPs In:</p>\r\n                    <p className=\"card-text\">InDis:</p>\r\n                    <p className=\"card-text\">OutDis:</p>\r\n                    <p className=\"card-text\">InErr:</p>\r\n                    <p className=\"card-text\">InDis:</p>\r\n                    <p className=\"card-text\">CRC:</p>\r\n                    <p className=\"card-text\">InDis:</p>\r\n\r\n                  </Col>\r\n                  <Col xl={3} style={{textAlign: \"left\"}}>\r\n                    <p className=\"card-text\">{props.value['statistics']['rx-pps']}</p>\r\n                    <p className=\"card-text\">{props.value['statistics']['tx-pps']}</p>\r\n                    <p className=\"card-text\">{props.value['statistics']['in-discards']}</p>\r\n                    <p className=\"card-text\">{props.value['statistics']['out-discards']}</p>\r\n                    <p className=\"card-text\">{props.value['statistics']['in-errors']}</p>\r\n                    <p className=\"card-text\">{props.value['statistics']['out-errors']}</p>\r\n                    <p className=\"card-text\">{props.value['statistics']['in-crc-errors']}</p>\r\n                    <p className=\"card-text\">{props.value['statistics']['num-flaps']}</p>\r\n                    \r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col xl={3} className=\"mt-3\" style={{textAlign: \"left\"}}>\r\n                  <p className=\"card-text\">Description:</p>\r\n                    <p className=\"card-text\">LastChange:</p>\r\n                  </Col>\r\n                  <Col xl={9} className=\"mt-3\" style={{textAlign: \"left\"}}>\r\n                  <p className=\"card-text\">{props.value.description}</p>\r\n                    <p className=\"card-text\">{props.value['statistics']['discontinuity-time'].split('.')[0]}</p>\r\n                  </Col>\r\n                \r\n                </Row>\r\n                </div>\r\n\r\n  }\r\n  \r\n  \r\n","import React from 'react';\nimport Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Container from \"react-bootstrap/Container\";\nimport Offcanvas from 'react-bootstrap/Offcanvas'\nimport Row from \"react-bootstrap/Row\";\nimport { Link } from \"react-router-dom\";\n\nexport  function Navigation(){\n  \n  return <Container fluid>\n          <Row xl className=\"mt-3\">\n            <Navbar bg={'black'} expand={false} className=\"mb-3\">\n            \n              <Navbar.Toggle aria-controls=\"offcanvasNavbar\" style={{backgroundColor: 'white'}}/>\n              <Navbar.Offcanvas\n                id=\"offcanvasNavbar\"\n                aria-labelledby=\"offcanvasNavbarLabel\"\n                placement=\"end\">\n                <Offcanvas.Header style={{ backgroundColor: '#868F80'}} closeButton>\n                  <Offcanvas.Title id=\"offcanvasNavbarLabel\" style={{ color: 'black'}}>XE-Ops Bandwdith Viewer</Offcanvas.Title>\n                </Offcanvas.Header>\n                <div className=\"border-bottom\" style={{color: 'black'}}/>\n                <Offcanvas.Body style={{backgroundColor: '#868F80'}}>\n                  <Nav className=\"justify-content-end flex-grow-1 pe-3\" >\n                    <Link style={{color: 'black', fontWeight: 'bold'}} className=\"nav-link \" to='/live_interfaces'>Cisco Live Interfaces</Link>\n                      <Link style={{color: 'black', fontWeight: 'bold'}} className=\"nav-link \" to='/ietf_live_interfaces'>IETF Live Interfaces</Link>\n                      <Link style={{color: 'black', fontWeight: 'bold'}} className=\"nav-link \" to='/logout'>Logout</Link>\n                      <p className=\"nav-link  disabledCursor\" style={{color: 'black', fontWeight: 'bold'}}>Connection: {localStorage.getItem('ip')}</p>\n                  </Nav>\n                </Offcanvas.Body>\n              </Navbar.Offcanvas>\n              </Navbar>      \n            </Row> \n          </Container>\n       \n  }\n  ","\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nexport function IsErrorFallback({error}){\r\n    const reportError = String(error.message)\r\n    return <Card bg=\"dark\" className=\"mb-3\" style={{height: '500px'}}>\r\n            <Card.Body>\r\n            <h3 classname=\"text-center fade-in\" style={{marginTop: 185, color: \"orange\", fontWeight: \"bold\", textAlign: \"center\"}}>!Something Went Wrong. Please Refresh! Please Report the Issue</h3>\r\n            <Col style={{textAlign: \"center\", fontSize: 20}}>\r\n                <a href='https://github.com/cober2019/react-ios-xe-ops/issues'>Click Here to Submit Issue</a>\r\n            </Col>\r\n            <h5 className=\"mt-3\" style={{textAlign: \"center\",  fontSize: 20}}>Report your current page/location in the app. Also a brief explanation on your task that errored</h5>\r\n            <pre className=\"mt-3\" style={{textAlign: \"center\",  fontSize: 20}}>{reportError}</pre>\r\n            </Card.Body>\r\n        </Card>\r\n}","import { ErrorBoundary } from  'react-error-boundary'\r\nimport Card from \"react-bootstrap/Card\";\r\nimport { IsErrorFallback } from \"./errorComponent\";\r\n\r\nexport function CreateCard(component, title){\r\n\r\n    const card =  <Card bg=\"dark\" className=\"mb-3 border-0 overflow-auto\">\r\n                    <Card.Body>\r\n                        <Card.Title className=\"mb-3\">{title}</Card.Title>\r\n                        <ErrorBoundary  FallbackComponent={IsErrorFallback}>\r\n                            {component}\r\n                        </ErrorBoundary>\r\n                    </Card.Body>\r\n                </Card>\r\n\r\n    return card\r\n    \r\n}\r\n","import Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Container from \"react-bootstrap/Container\";\r\n\r\nexport const PageLoader = (ip, serial, model, uptime, software) => {\r\n\r\n    const html = <Container fluid=\"xl\">\r\n                <Row>\r\n                        <Col xl={2}/>\r\n                        <Col xl={8}>\r\n                            <h3 className=\"blinking-loader\" style={{marginTop: \"100px\"}}>Collecting Data From {ip}</h3>\r\n                        </Col>\r\n                        <Col xl={2}/>\r\n                    </Row>\r\n                     </Container>\r\n        \r\n    return html\r\n}\r\n\r\n\r\n","\r\n\r\nexport const BandwidthDiff = (cachedQuery, data) => {\r\n    try{\r\n        const lastQuery = cachedQuery.getQueryCache(localStorage.getItem('ip') + 'indexData').queries[0].state.data.interfaces;\r\n        Object.values(lastQuery).map(cacheValue => {\r\n          Object.values(data.interfaces).map(newValue => {\r\n              if(newValue.data.name === cacheValue.data.name){\r\n\r\n                const diffIn = parseFloat(newValue.data['statistics']['rx-kbps'] - parseFloat(cacheValue.data['statistics']['rx-kbps']));\r\n                const diffOut = parseFloat(newValue.data['statistics']['tx-kbps'] - parseFloat(cacheValue.data['statistics']['tx-kbps']));\r\n\r\n                if(Math.sign(diffIn) === 1){\r\n                  newValue.data.inbandwidthDiff =  '+' + diffIn.toFixed(2)\r\n                }\r\n                else if(Math.sign(diffIn) === -1){\r\n                  newValue.data.inbandwidthDiff = diffIn.toFixed(2)\r\n                }\r\n                else{\r\n                  newValue.data.inbandwidthDiff = diffIn\r\n                };                            \r\n                \r\n                if(Math.sign(diffOut) === 1){\r\n                  newValue.data.outbandwidthDiff = '+' + diffOut.toFixed(2)\r\n                }\r\n                else if(Math.sign(diffOut) === -1){\r\n                  newValue.data.outbandwidthDiff = diffOut.toFixed(2)\r\n                }\r\n                else{\r\n                  newValue.data.outbandwidthDiff = diffOut\r\n                };\r\n                return null\r\n              };\r\n              return null\r\n            });\r\n            return null\r\n          });\r\n      }\r\n      catch{}\r\n\r\n    return data\r\n\r\n}\r\n\r\n","import Modal from 'react-bootstrap/Modal'\r\nimport { CreateCard } from './jsxCard';\r\n\r\nexport function ShowInterface(props) {\r\n  console.log(props)\r\n    return (\r\n      <Modal\r\n        {...props}\r\n        size=\"xl\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        backdrop={false}\r\n        \r\n      >\r\n        <Modal.Header closeButton>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          {CreateCard(props.component, props.interface)}\r\n        </Modal.Body>\r\n      </Modal>\r\n    );\r\n  }","import React from 'react';\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nexport function SetInterval(props){\r\n  const [intervalMs, setIntervalMs] = React.useState()\r\n\r\n  const handleSubmit =  (e) => {\r\n    localStorage.setItem('pollingInterval', intervalMs)\r\n  };\r\n\r\nreturn   <>\r\n            <Form onSubmit={handleSubmit}v>\r\n                <Form.Group as={Col} controlId=\"routerId\">\r\n                        <Form.Label style={{textAlign: 'left', fontWeight: 'bold'}}>Polling Interval ({localStorage.getItem('pollingInterval')}ms + 5ish)</Form.Label>\r\n                        <Form.Control className=\"mb-3\" size=\"sm\"  onChange={e => setIntervalMs(e.target.value)} placeholder=\"Interval Ms ex. 10000\" name=\"interval\" style={{textAlign: 'left', fontWeight: 'bold'}}/>\r\n                </Form.Group>\r\n                <Col xl={4}>\r\n                    <Form.Control type=\"submit\" value=\"Change\" className=\"btn btn-success btn-sm mb-3\"/>\r\n                </Col>\r\n            </Form>\r\n        </>\r\n             \r\n  }\r\n    ","import React from 'react';\nimport { useQuery } from 'react-query'\nimport Container from \"react-bootstrap/Container\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport axios from 'axios';\nimport {useRecoilState} from 'recoil';\nimport { ErrorBoundary } from  'react-error-boundary'\nimport { AES, enc }from 'crypto-js';\nimport { InterfaceCard} from './interfaceCard'\nimport { Navigation } from './navbar';\nimport { CreateCard } from './jsxCard';\nimport { IsErrorFallback } from \"./errorComponent\";\nimport { PageLoader } from './pageLoader';\nimport { BandwidthDiff } from './bandwidthFunctions';\nimport { ShowInterface } from './interfaceModal';\nimport { SetInterval } from './pollingInterval';\nimport {encytpKey, client}  from '../App'\n\nexport function LiveInterfaces(){\n  const [decrypt] = useRecoilState(encytpKey);\n  const [cache] = useRecoilState(client);\n  const [modalShow, setModalShow] = React.useState(false);\n  const [selectInterface, setSelectInterface] = React.useState(undefined)\n  const passwordDecrypt = AES.decrypt(localStorage.getItem('password'), decrypt);\n\n  const { isLoading, error, data, isFetching } = useQuery(localStorage.getItem('ip') + 'liveinterfaces', async () => {\n    const data = await axios.post('/liveinterfaces', {'ip': localStorage.getItem('ip'), 'username': localStorage.getItem('username'), \n                'password': passwordDecrypt.toString(enc.Utf8), 'port': localStorage.getItem('port')})\n\n          const calulatedBandwdithDiff = BandwidthDiff(cache, data.data)\n          if(selectInterface !== undefined){\n              Object.values(calulatedBandwdithDiff.interfaces).map(int => {\n                if(int.data.name === selectInterface.interface && modalShow){\n                  setSelectInterface(int)\n                }\n              return Int8Array\n            })\n          }\n\n          return calulatedBandwdithDiff\n        \n    },\n    {\n      refetchInterval: parseInt(localStorage.getItem('pollingInterval')),\n    }\n  )\n\n  const interfaceFocus = (interfaceDetails) => {\n    setSelectInterface(interfaceDetails)\n    setModalShow(true)\n  }\n\n  const closeInterface = () => {\n    setSelectInterface(undefined)\n    setModalShow(false)\n  }\n\n  if (error){\n    return  <div>\n              <Navigation/>\n              <h4 className=\"text-center fade-in\" style={{marginTop: 100}}>Error Collecting Data. I'll Keep Trying</h4>\n              <div className=\"warning-loader text-center\"></div>\n            </div>\n  }\n  else if (data){\n        return  <Container fluid>\n                    <ErrorBoundary  FallbackComponent={IsErrorFallback}>\n                      <Navigation update={data} ip={localStorage.getItem('ip')} fetchingStatus={isFetching} cpu={data.cpu} mem={data.mem}/>\n                      </ErrorBoundary>\n                      <Row>\n                      <Col xl={2}>\n                        <Row>\n                          { Object.values(data.interfaces).map((value) => (\n                                <button key={value} type=\"button\" style={{marginBottom: \"10px\"}} className=\"btn btn-success btn-md\" onClick={()=> interfaceFocus(value)}>{value.interface}</button>\n                                ))}\n                        </Row>\n                        <Row className=\"border-bottom mb-3 mt-3\" style={{color: 'black'}}/>\n                        <ErrorBoundary  FallbackComponent={IsErrorFallback}>\n                          <SetInterval/>\n                        </ErrorBoundary>\n                      </Col>\n                      <Col xl={10}>\n                        <Row>\n                            { Object.values(data.interfaces).map((value) => (\n                                <Col xl={4} key={value}>\n                                {CreateCard(<InterfaceCard key={value.interface} qos={value.qos} value={value.data}/>, value.interface)}\n                                </Col>\n                            ))}\n                        </Row>\n                      </Col>\n                      </Row>\n                      {modalShow ? <ShowInterface interface={selectInterface.interface} component={<InterfaceCard key={selectInterface.interface} qos={selectInterface.qos} value={selectInterface.data}/>} show={modalShow} onHide={() => closeInterface()}/>\n                        :  \n                        <></>}\n                </Container>\n\n  }\n  else if (isLoading){\n\n    return <>\n              {PageLoader(localStorage.getItem('ip'), localStorage.getItem('serial'), localStorage.getItem('model'), localStorage.getItem('uptime'), localStorage.getItem('software'))}\n            </>\n  }\n\n\n  }\n    ","import React, { useEffect, useRef } from 'react';\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport { InitialChartBuild, UpdateChart } from './chartConfigs';\r\nconst $ = require('jquery');\r\n$.DataTable = require('datatables.net');\r\n\r\n\r\nexport  function IetfInterfaceCard(props){\r\n  const interfacesChart = useRef(null)\r\n  const interfacesRef = React.createRef()\r\n\r\n  useEffect(() => {\r\n    if(interfacesChart.current !== null && !props.isPolling){\r\n      try{\r\n        let updatedChart = UpdateChart(interfacesChart.current, parseInt(props.value['mbps_out']), parseInt(props.value['mbps_in']));\r\n        updatedChart.update()\r\n        interfacesChart.current = updatedChart\r\n      }\r\n      catch{}\r\n    }\r\n    \r\n  }, [props.value, interfacesRef])\r\n  \r\n\r\n  useEffect(() => {\r\n    try{\r\n      let chart = InitialChartBuild(interfacesRef.current.getContext('2d'), parseInt(props.value['mbps_out']), parseInt(props.value['mbps_in']));\r\n      interfacesChart.current = chart\r\n    }\r\n    catch{}\r\n  }, [props.value, interfacesRef])\r\n\r\nreturn      <div id={props.key}>\r\n            <Row>\r\n              <canvas ref={interfacesRef} height=\"300px\"/>\r\n            </Row>\r\n            <br/>\r\n              <Row >\r\n                  <Col xl={3} style={{textAlign: \"left\"}}>\r\n                    <p className=\"card-text\">Descr:</p>\r\n                    <p className=\"card-text\">IP Address:</p>\r\n                    <p className=\"card-text\">Speed:</p>\r\n                    <p className=\"card-text\">Status:</p>\r\n                    <p className=\"card-text\">Mbps Out:</p>\r\n                    <p className=\"card-text\">Mbps In:</p>\r\n                    <p className=\"card-text\">LastChange:</p>\r\n                  </Col>\r\n                  <Col xl={9} style={{textAlign: \"left\"}}>\r\n                    <p className=\"card-text\">{props.value['description']}</p>\r\n                    <p className=\"card-text\">{props.value['ip_address']}</p>\r\n                    <p className=\"card-text\">{Math.round(parseInt(props.value.speed) / 1000000000) * 1000 } (Mbps)</p>\r\n                    <p className=\"card-text\">{props.value['oper-status']}</p>\r\n                    <p className=\"card-text\">{Math.round(parseInt(props.value['mbps_out']))}</p>\r\n                    <p className=\"card-text\">{Math.round(parseInt(props.value['mbps_in']))}</p>\r\n                    <p className=\"card-text\">{props.value['statistics']['discontinuity-time'].split('.')[0]}</p>\r\n                  </Col>\r\n                \r\n                </Row>\r\n                </div>\r\n\r\n  }\r\n  \r\n  \r\n","import React from 'react';\r\nimport { useQuery } from 'react-query'\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport axios from 'axios';\r\nimport {useRecoilState} from 'recoil';\r\nimport { ErrorBoundary } from  'react-error-boundary'\r\nimport { AES, enc }from 'crypto-js';\r\nimport { IetfInterfaceCard } from './ietfInterfaceCard'\r\nimport { Navigation } from './navbar';\r\nimport { CreateCard } from './jsxCard';\r\nimport { IsErrorFallback } from \"./errorComponent\";\r\nimport { PageLoader } from './pageLoader';\r\nimport { BandwidthDiff } from './bandwidthFunctions';\r\nimport { ShowInterface } from './interfaceModal';\r\nimport { SetInterval } from './pollingInterval';\r\nimport {encytpKey, client}  from '../App'\r\n\r\nexport function IetfLiveInterfaces(){\r\n  const [decrypt] = useRecoilState(encytpKey);\r\n  const [cache] = useRecoilState(client);\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n  const [selectInterface, setSelectInterface] = React.useState(undefined)\r\n  const passwordDecrypt = AES.decrypt(localStorage.getItem('password'), decrypt);\r\n  const { isLoading, error, data, isFetching } = useQuery(localStorage.getItem('ip') + 'interface_stats_ietf', async () => {\r\n\r\n    const data = await axios.post('/interface_stats_ietf', {'pollingInterval': localStorage.getItem('pollingInterval')})\r\n\r\n        \r\n    return data\r\n        \r\n    },\r\n    {\r\n      refetchInterval: parseInt(localStorage.getItem('pollingInterval')),\r\n    }\r\n  )\r\n\r\n  const interfaceFocus = (interfaceDetails) => {\r\n    setSelectInterface(interfaceDetails)\r\n    setModalShow(true)\r\n  }\r\n\r\n  const closeInterface = () => {\r\n    setSelectInterface(undefined)\r\n    setModalShow(false)\r\n  }\r\n\r\n  if(error){\r\n    return  <div>\r\n              <Navigation/>\r\n              <h4 className=\"text-center fade-in\" style={{marginTop: 100}}>Error Collecting Data. I'll Keep Trying</h4>\r\n              <div className=\"warning-loader text-center\"></div>\r\n            </div>\r\n  }\r\n  else if (data){\r\n        return  <Container fluid>\r\n                    <ErrorBoundary  FallbackComponent={IsErrorFallback}>\r\n                      <Navigation update={data} ip={localStorage.getItem('ip')} fetchingStatus={isFetching} cpu={data.cpu} mem={data.mem}/>\r\n                      </ErrorBoundary>\r\n                      <Row>\r\n                      <Col xl={2}>\r\n                        <Row>\r\n                          \r\n                          { data.data.stats.map((value) => (\r\n                                <button key={value} type=\"button\" style={{marginBottom: \"10px\"}} className=\"btn btn-success btn-md\" onClick={()=> interfaceFocus(value)}>{value.name}</button>\r\n                                ))}\r\n                        </Row>\r\n                        <Row className=\"border-bottom mb-3 mt-3\" style={{color: 'black'}}/>\r\n                        <ErrorBoundary  FallbackComponent={IsErrorFallback}>\r\n                          <SetInterval/>\r\n                        </ErrorBoundary>\r\n                      </Col>\r\n                      <Col xl={10}>\r\n                        <Row>\r\n                            { data.data.stats.map((value) => (\r\n                                <Col xl={4} key={value}>\r\n                                {CreateCard(<IetfInterfaceCard key={value.name} isPolling={isFetching} value={value}/>, value.name)}\r\n                                </Col>\r\n                            ))}\r\n                        </Row>\r\n                      </Col>\r\n                      </Row>\r\n                      {modalShow ? <ShowInterface interface={selectInterface.interface} component={<IetfInterfaceCard key={selectInterface.name}  value={selectInterface}/>} show={modalShow} onHide={() => closeInterface()}/>\r\n                        :  \r\n                        <></>}\r\n                </Container>\r\n  }\r\n  else if (isLoading){\r\n\r\n    return <>\r\n              {PageLoader(localStorage.getItem('ip'), localStorage.getItem('serial'), localStorage.getItem('model'), localStorage.getItem('uptime'), localStorage.getItem('software'))}\r\n            </>\r\n  }\r\n\r\n\r\n  }\r\n    ","import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { DeviceAuth }  from './Components/login.js';\nimport { LiveInterfaces }  from './Components/liveInterface.js';\nimport { IetfLiveInterfaces }  from './Components/ietf_live_interfaces';\nimport { RecoilRoot, atom } from 'recoil';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport { QueryClient, QueryClientProvider } from 'react-query';\nconst queryClient = new QueryClient();\n\nexport const encytpKey = atom({\n  key: 'key',\n  default: 'jdh%):Aap(3>S#', \n});\n\nexport const client = atom({\n  key: 'queryClient',\n  default: queryClient, \n});\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n\n          <Route path=\"/live_interfaces\">\n          <RecoilRoot>\n              <QueryClientProvider client={queryClient}>\n                <LiveInterfaces/>\n              </QueryClientProvider>\n            </RecoilRoot>\n          </Route>\n\n          <Route path=\"/ietf_live_interfaces\">\n          <RecoilRoot>\n              <QueryClientProvider client={queryClient}>\n                <IetfLiveInterfaces/>\n              </QueryClientProvider>\n            </RecoilRoot>\n          </Route>\n\n          <Route path=\"/\">\n          <RecoilRoot>\n              <QueryClientProvider client={queryClient}>\n                <DeviceAuth/>\n              </QueryClientProvider>\n            </RecoilRoot>\n\t        </Route>\n\n\t        <Route path=\"/logout\">\n            <RecoilRoot>\n              <QueryClientProvider client={queryClient}>\n                <DeviceAuth/>\n              </QueryClientProvider>\n            </RecoilRoot>\n\t        </Route>\n\n        </Switch>\n    </Router>\n    </div>\n\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}